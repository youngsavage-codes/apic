{"code":"import { __awaiter } from \"tslib\";\n// Cache to store API responses\nconst cache = new Map();\nconst CACHE_EXPIRATION_TIME = 5 * 60 * 1000; // 5 minutes\n// Helper function to build headers with optional authorization\nfunction buildHeaders(contentType, authToken) {\n    const headers = {\n        'Content-Type': contentType,\n    };\n    if (authToken) {\n        headers['Authorization'] = `Bearer ${authToken}`;\n    }\n    return headers;\n}\n// Fetch data (GET) with Authorization header support\nexport function fetchData(url, authToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const cachedData = cache.get(url);\n        if (cachedData && Date.now() - cachedData.timestamp < CACHE_EXPIRATION_TIME) {\n            console.log('Returning cached data');\n            return cachedData.data; // Return cached data if valid\n        }\n        try {\n            const response = yield fetch(url, {\n                method: 'GET',\n                headers: buildHeaders('application/json', authToken), // Default to JSON if not specified\n            });\n            const data = yield response.json();\n            cache.set(url, { data, timestamp: Date.now() });\n            return data;\n        }\n        catch (error) {\n            console.error('Error fetching data:', error);\n            throw error;\n        }\n    });\n}\n// POST Request (Create resource) with Authorization and customizable content type\nexport function postData(url, body, authToken, contentType = 'application/json') {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const headers = buildHeaders(contentType, authToken);\n            let bodyContent;\n            if (contentType === 'application/json') {\n                bodyContent = JSON.stringify(body); // JSON string for JSON requests\n            }\n            else if (contentType === 'application/x-www-form-urlencoded') {\n                bodyContent = new URLSearchParams(body).toString(); // URL-encoded body\n            }\n            else if (contentType === 'multipart/form-data') {\n                const formData = new FormData();\n                Object.keys(body).forEach(key => formData.append(key, body[key])); // Form data\n                bodyContent = formData;\n            }\n            else {\n                bodyContent = body; // For other types like text/plain, just pass body as is\n            }\n            const response = yield fetch(url, {\n                method: 'POST',\n                headers: headers,\n                body: bodyContent,\n            });\n            const data = yield response.json();\n            return data;\n        }\n        catch (error) {\n            console.error('Error posting data:', error);\n            throw error;\n        }\n    });\n}\n// PUT Request (Update resource completely) with Authorization\nexport function putData(url, body, authToken, contentType = 'application/json') {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const headers = buildHeaders(contentType, authToken);\n            let bodyContent;\n            if (contentType === 'application/json') {\n                bodyContent = JSON.stringify(body); // JSON string for JSON requests\n            }\n            else if (contentType === 'application/x-www-form-urlencoded') {\n                bodyContent = new URLSearchParams(body).toString(); // URL-encoded body\n            }\n            else if (contentType === 'multipart/form-data') {\n                const formData = new FormData();\n                Object.keys(body).forEach(key => formData.append(key, body[key])); // Form data\n                bodyContent = formData;\n            }\n            else {\n                bodyContent = body; // For other types like text/plain, just pass body as is\n            }\n            const response = yield fetch(url, {\n                method: 'PUT',\n                headers: headers,\n                body: bodyContent,\n            });\n            const data = yield response.json();\n            return data;\n        }\n        catch (error) {\n            console.error('Error updating data:', error);\n            throw error;\n        }\n    });\n}\n// PATCH Request (Partially update resource) with Authorization\nexport function patchData(url, body, authToken, contentType = 'application/json') {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const headers = buildHeaders(contentType, authToken);\n            let bodyContent;\n            if (contentType === 'application/json') {\n                bodyContent = JSON.stringify(body); // JSON string for JSON requests\n            }\n            else if (contentType === 'application/x-www-form-urlencoded') {\n                bodyContent = new URLSearchParams(body).toString(); // URL-encoded body\n            }\n            else if (contentType === 'multipart/form-data') {\n                const formData = new FormData();\n                Object.keys(body).forEach(key => formData.append(key, body[key])); // Form data\n                bodyContent = formData;\n            }\n            else {\n                bodyContent = body; // For other types like text/plain, just pass body as is\n            }\n            const response = yield fetch(url, {\n                method: 'PATCH',\n                headers: headers,\n                body: bodyContent,\n            });\n            const data = yield response.json();\n            return data;\n        }\n        catch (error) {\n            console.error('Error updating data:', error);\n            throw error;\n        }\n    });\n}\n// DELETE Request (Delete resource) with Authorization\nexport function deleteData(url, authToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const response = yield fetch(url, {\n                method: 'DELETE',\n                headers: buildHeaders('application/json', authToken), // Default to JSON if not specified\n            });\n            const data = yield response.json();\n            return data;\n        }\n        catch (error) {\n            console.error('Error deleting data:', error);\n            throw error;\n        }\n    });\n}\n// Retry Logic with Exponential Backoff for any HTTP method (GET, POST, PUT, PATCH, DELETE)\nexport function retryRequest(method, url, body, authToken, contentType = 'application/json', retries = 3, delay = 1000) {\n    return __awaiter(this, void 0, void 0, function* () {\n        function attemptRequest(retriesLeft, currentDelay) {\n            return __awaiter(this, void 0, void 0, function* () {\n                try {\n                    const requestFunction = method === 'GET' ? fetchData :\n                        method === 'POST' ? postData :\n                            method === 'PUT' ? putData :\n                                method === 'PATCH' ? patchData :\n                                    deleteData;\n                    return yield requestFunction(url, body, authToken, contentType); // Await the request\n                }\n                catch (error) {\n                    if (retriesLeft > 0) {\n                        console.log(`Retrying... (${retriesLeft} retries left)`);\n                        yield new Promise(resolve => setTimeout(resolve, currentDelay)); // Wait before retrying\n                        return yield attemptRequest(retriesLeft - 1, currentDelay * 2); // Retry with exponential backoff\n                    }\n                    else {\n                        throw error; // Throw the error if all retries fail\n                    }\n                }\n            });\n        }\n        return attemptRequest(retries, delay);\n    });\n}\n","references":[],"dts":{"name":"C:/Users/User/Documents/GitHub/apic/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"export declare function fetchData(url: string, authToken?: string): Promise<any>;\nexport declare function postData(url: string, body: any, authToken?: string, contentType?: string): Promise<any>;\nexport declare function putData(url: string, body: any, authToken?: string, contentType?: string): Promise<any>;\nexport declare function patchData(url: string, body: any, authToken?: string, contentType?: string): Promise<any>;\nexport declare function deleteData(url: string, authToken?: string): Promise<any>;\nexport declare function retryRequest(method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE', url: string, body?: any, authToken?: string, contentType?: string, retries?: number, delay?: number): Promise<any>;\n"}}
