{"code":"import { __awaiter } from \"tslib\";\nimport { refreshData } from \"./refresh\";\nexport function withRetry(operation_1, retries_1, delay_1) {\n    return __awaiter(this, arguments, void 0, function* (operation, retries, delay, refreshLimit = 3 // Default refresh limit if retries exceed\n    ) {\n        let attempt = 0;\n        let refreshAttempts = 0;\n        while (attempt <= retries) {\n            try {\n                // Attempt the operation\n                return yield operation();\n            }\n            catch (error) {\n                attempt++;\n                if (attempt <= retries) {\n                    // Retry with delay\n                    yield new Promise((resolve) => setTimeout(resolve, delay));\n                }\n                // If retry count exceeded and refresh limit is available, refresh request\n                if (attempt > retries && refreshAttempts < refreshLimit) {\n                    refreshAttempts++;\n                    yield refreshData(); // Use the local refreshData function\n                }\n            }\n        }\n        // Throw error after retries are exhausted\n        throw new Error('Max retries exceeded. Operation failed.');\n    });\n}\n","references":["C:/Users/User/Documents/GitHub/apic/src/api/refresh.ts"],"dts":{"name":"C:/Users/User/Documents/GitHub/apic/node_modules/.cache/rollup-plugin-typescript2/placeholder/api/retry.d.ts","writeByteOrderMark":false,"text":"export declare function withRetry(operation: () => Promise<any>, retries: number, delay: number, refreshLimit?: number): Promise<any>;\n"}}
