{"code":"// apic.ts\nimport { __awaiter } from \"tslib\";\nimport { cache } from \"./api/cache\";\nimport { defaultConfig } from \"./api/config\";\nimport { deleteData } from \"./api/delete\";\nimport { fetchData } from \"./api/fetch\";\nimport { postData } from \"./api/post\";\nimport { putOrPatchData } from \"./api/putOrPatch\";\nclass Apic {\n    constructor(config = {}) {\n        this.headers = {}; // New property for headers\n        this.config = Object.assign(Object.assign({}, defaultConfig), config);\n    }\n    // Method to set custom headers\n    setHeaders(headers) {\n        this.headers = Object.assign(Object.assign({}, this.headers), headers); // Merge existing and new headers\n    }\n    // GET request\n    get(url, authToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return fetchData(url, authToken, this.config, this.headers); // Pass headers along with config\n        });\n    }\n    // POST request\n    post(url_1, body_1, authToken_1) {\n        return __awaiter(this, arguments, void 0, function* (url, body, authToken, contentType = 'application/json') {\n            return postData(url, body, authToken, contentType, this.config, this.headers); // Pass headers along with config\n        });\n    }\n    // PUT request\n    put(url_1, body_1, authToken_1) {\n        return __awaiter(this, arguments, void 0, function* (url, body, authToken, contentType = 'application/json') {\n            return putOrPatchData('PUT', url, body, authToken, contentType, this.config, this.headers); // Pass headers along with config\n        });\n    }\n    // PATCH request\n    patch(url_1, body_1, authToken_1) {\n        return __awaiter(this, arguments, void 0, function* (url, body, authToken, contentType = 'application/json') {\n            return putOrPatchData('PATCH', url, body, authToken, contentType, this.config, this.headers); // Pass headers along with config\n        });\n    }\n    // DELETE request\n    delete(url, authToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return deleteData(url, authToken, this.config, this.headers); // Pass headers along with config\n        });\n    }\n    // Set or update configuration\n    setConfig(config) {\n        this.config = Object.assign(Object.assign({}, this.config), config);\n    }\n    // Get current configuration\n    getConfig() {\n        return this.config;\n    }\n    // Access cache directly\n    getCache() {\n        return cache;\n    }\n    // Clear cache for a specific URL or all cached data\n    clearCache(url) {\n        if (url) {\n            // Clear cache for a specific URL\n            cache.delete(url);\n        }\n        else {\n            // Clear all cached data\n            cache.clear();\n        }\n    }\n}\nexport default Apic;\n","references":["C:/Users/User/Documents/GitHub/apic/src/api/cache.ts","C:/Users/User/Documents/GitHub/apic/src/api/config.ts","C:/Users/User/Documents/GitHub/apic/src/api/delete.ts","C:/Users/User/Documents/GitHub/apic/src/api/fetch.ts","C:/Users/User/Documents/GitHub/apic/src/api/post.ts","C:/Users/User/Documents/GitHub/apic/src/api/putOrPatch.ts"],"dts":{"name":"C:/Users/User/Documents/GitHub/apic/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { defaultConfig } from \"./api/config\";\ndeclare class Apic {\n    config: typeof defaultConfig;\n    private headers;\n    constructor(config?: Partial<typeof defaultConfig>);\n    setHeaders(headers: Record<string, string>): void;\n    get(url: string, authToken?: string): Promise<any>;\n    post(url: string, body: any, authToken?: string, contentType?: string): Promise<any>;\n    put(url: string, body: any, authToken?: string, contentType?: string): Promise<any>;\n    patch(url: string, body: any, authToken?: string, contentType?: string): Promise<any>;\n    delete(url: string, authToken?: string): Promise<any>;\n    setConfig(config: Partial<typeof defaultConfig>): void;\n    getConfig(): typeof defaultConfig;\n    getCache(): Map<string, {\n        data: any;\n        timestamp: number;\n    }>;\n    clearCache(url?: string): void;\n}\nexport default Apic;\n"}}
