{"code":"import { __awaiter } from \"tslib\";\nimport { buildHeaders } from './headers';\nimport { defaultConfig } from './config';\nimport { withRetry } from './retry';\nexport function putOrPatchData(method_1, url_1, body_1, authToken_1) {\n    return __awaiter(this, arguments, void 0, function* (method, url, body, authToken, contentType = 'application/json', config = {}, headers = {}, // Add custom headers\n    timeout = 5000 // Default timeout: 5 seconds\n    ) {\n        const finalConfig = Object.assign(Object.assign({}, defaultConfig), config);\n        const operation = () => __awaiter(this, void 0, void 0, function* () {\n            const responseOrError = yield Promise.race([\n                fetch(url, {\n                    method,\n                    headers: Object.assign(Object.assign({}, buildHeaders(contentType, authToken)), headers),\n                    body: JSON.stringify(body),\n                }),\n                new Promise((_, reject) => setTimeout(() => reject(new Error('Request timed out')), timeout)),\n            ]);\n            if (responseOrError instanceof Error) {\n                throw responseOrError; // Timeout or other error\n            }\n            const response = responseOrError;\n            if (!response.ok)\n                throw new Error(`HTTP error: ${response.status}`);\n            return response.json();\n        });\n        return finalConfig.enableRetry\n            ? withRetry(operation, finalConfig.retries, finalConfig.retryDelay)\n            : operation();\n    });\n}\n","references":["C:/Users/User/Documents/GitHub/apic/src/api/headers.ts","C:/Users/User/Documents/GitHub/apic/src/api/config.ts","C:/Users/User/Documents/GitHub/apic/src/api/retry.ts"],"dts":{"name":"C:/Users/User/Documents/GitHub/apic/node_modules/.cache/rollup-plugin-typescript2/placeholder/api/putOrPatch.d.ts","writeByteOrderMark":false,"text":"import { defaultConfig } from './config';\nexport declare function putOrPatchData(method: 'PUT' | 'PATCH', url: string, body: any, authToken?: string, contentType?: string, config?: Partial<typeof defaultConfig>, headers?: Record<string, string>, // Add custom headers\ntimeout?: number): Promise<any>;\n"}}
